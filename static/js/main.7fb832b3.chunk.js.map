{"version":3,"sources":["components/Loading.jsx","pages/CrearUsuario.jsx","constants/ip_services.js","pages/Home.jsx","pages/PageError.jsx","pages/Usuarios.jsx","router.js","App.js","serviceWorker.js","index.js"],"names":["Loading","style","color","CrearUsuario","history","useHistory","useState","nombre","ap","values","setValues","cargando","setCargando","saveUsuarios","e","a","formData","FormData","fileField","document","querySelector","console","log","files","append","preventDefault","fetch","method","body","res","json","data","alert","message","setTimeout","push","onSubmit","value","onChange","target","required","type","accept","max","Home","to","PageError","Usuarios","lista","setLista","useEffect","getData","map","key","id","src","img","height","alt","apeido","fecha_alta","path","component","exact","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7fb832b3.chunk.js","sourcesContent":["import React from 'react'\n\nconst Loading = () => <div>\n    <h3 style={{color:'#00000060'}}>Cargando...</h3>\n</div>\n\nexport default Loading;","import React, { useState } from 'react'\nimport { useHistory } from 'react-router';\nimport Loading from '../components/Loading';\nimport { IP_API } from '../constants/ip_services';\n\n\n\nconst CrearUsuario = () => {\n    const history = useHistory();\n    const [values ,setValues] = useState({\n        nombre:'',\n        ap:'',\n    });\n    const [cargando,setCargando] = useState(false);\n\n    const saveUsuarios = async e =>{\n        setCargando(true);\n        const formData = new FormData();\n        const fileField = document.querySelector(\"input[type='file']\");\n\n        console.log(fileField.files[0]);\n        formData.append('avatar',fileField.files[0]);\n        formData.append('nombre',values.nombre);\n        formData.append('apeido',values.ap);\n\n        e.preventDefault();\n        const res = await fetch(`${IP_API}/api/addUsuarios/`,{\n            method:'POST',\n            body:formData\n        });\n        const data = await res.json();\n        console.log(data);\n        alert(data.message);\n        setTimeout(()=>{\n            setCargando(false);\n            history.push('/usuarios');\n        },1000)\n    }\n\n    return(<div>\n        <h4>Nuevo Usuario</h4>\n       {cargando ? <Loading/> : <form onSubmit={saveUsuarios}>\n            <label>Nombre</label>\n            <input \n                value={values.nombre} \n                onChange={e=>setValues({...values,nombre:e.target.value})} \n                required\n            />\n            <label>Apeido</label>\n            <input \n                value={values.ap}\n                onChange={e=>setValues({...values,ap:e.target.value})}\n                required\n            />\n            <input \n                type='file' \n                accept=\"image/png, image/jpeg\" \n                max='1000'\n                required\n            />\n            <button type='submit' > Enviar</button>\n        </form>}\n    </div>);\n}\n\nexport default CrearUsuario;","\nexport const IP_API = process.env['NODE_ENV']==='development' ? 'http://localhost:8080' : '';","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Home = ()=><div>\n    <h3>Home pages</h3>\n    <Link to='/usuarios'>Usuarios</Link>\n</div>\n\nexport default Home;","import React from 'react'\n\nconst PageError = () => <div>\n    <h3>Error pagina no encontrada!</h3>\n</div>\n\nexport default PageError;","import React, { useEffect, useState } from 'react'\nimport { Link } from 'react-router-dom';\nimport { IP_API } from '../constants/ip_services';\n\nconst Usuarios = ()=>{\n    const [lista,setLista] = useState([]);\n\n    useEffect(()=>{\n        getData();\n    },[]);\n\n    const getData = async () =>{\n        const res = await fetch(`${IP_API}/api/getUsuarios/`);\n        console.log('res=> ',res);\n        const data = await res.json();\n        console.log(data);\n        setLista(data); \n    }\n\n    return <div>\n        <h3>Usuarios</h3>\n        <Link to='/usuario/crear'>nuevo</Link>\n        <hr/>\n        <ol>\n            {\n            lista.map(e=><li key={e.id}>\n                <img src={`${IP_API+'/' + e.img}`} height='80' alt='avatar' />\n                <b> {`${e.nombre} ${e.apeido} `} </b>\n                <u>{e.fecha_alta}</u>\n            </li>)\n            }\n        </ol>\n    </div>\n}\nexport default Usuarios;","import React from 'react';\nimport {\n    BrowserRouter,\n    Route,\n    Switch\n} from 'react-router-dom';\nimport CrearUsuario from './pages/CrearUsuario';\nimport Home from './pages/Home';\nimport PageError from './pages/PageError';\nimport Usuarios from './pages/Usuarios';\n\nexport default ()=>{\n\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route path='/' component={Home} exact />\n                <Route path='/usuarios' component={Usuarios} exact />\n                <Route path='/usuario/crear' component={CrearUsuario} exact />\n                <Route path='' component={PageError} />\n            </Switch>\n        </BrowserRouter>\n    );\n}","import React from 'react';\nimport './App.css';\nimport Router from './router';\n\nfunction App() {\n  return (\n    <Router />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}